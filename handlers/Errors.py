from loader import dp
from filters import IsRegistered, IsNotRegistered
from states import register, add_notes
from aiogram.dispatcher import FSMContext
from aiogram import types


@dp.message_handler(state=[register.time_weather_notify, add_notes.time_notify])
async def time_error(message: types.Message, state: FSMContext):
    await message.answer("–¢—ã –¥–æ–ø—É—Å—Ç–∏–ª –æ—à–∏–±–∫—É. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑!\n"
                         "–§–æ—Ä–º–∞—Ç: hh:mm (–Ω–∞–ø—Ä–∏–º–µ—Ä, 09:30)")


@dp.message_handler(state=add_notes.date_notify)
async def date_error(message: types.Message, state: FSMContext):
    await message.answer("–¢—ã –¥–æ–ø—É—Å—Ç–∏–ª –æ—à–∏–±–∫—É. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑!\n"
                         "–§–æ—Ä–º–∞—Ç: dd-mm-yy (–Ω–∞–ø—Ä–∏–º–µ—Ä, 31-12-22)")


@dp.message_handler()
async def unknown_cmd(message: types.Message):
    await message.answer("–ù–µ –ø–æ–Ω–∏–º–∞—é –æ —á–µ–º —Ç—ã üôÅ\n"
                         "–ù–∞–ø–∏—à–∏ —á—Ç–æ-–Ω–∏–±—É–¥—å –ø–æ–Ω—è—Ç–Ω–æ–µ")