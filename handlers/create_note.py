"""  """
from handlers.apsched import note_notification
from loader import dp, scheduler
from filters import IsRegistered
from aiogram import types
from states import add_notes
from aiogram.dispatcher import FSMContext
from keyboards.default import cancel_menu, main_menu
from db_executor import add_new_note, get_last_user_note
from datetime import datetime


@dp.message_handler(IsRegistered(), state=add_notes.states, text="–û—Ç–º–µ–Ω–∞‚ùå")
async def cancel_note(message: types.Message, state: FSMContext):  # –æ—Ç–º–µ–Ω–∞ –∑–∞–ø–∏—Å–∏
    await state.reset_data()
    await state.finish()
    await message.answer('–ó–∞–ø–∏—Å—å –ø—Ä–µ–∫—Ä–∞—â–µ–Ω–∞', reply_markup=main_menu)


@dp.message_handler(IsRegistered(), commands=['create_note'])
@dp.message_handler(IsRegistered(), text='–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é\n–∑–∞–ø–∏—Å—åüìù')
async def description_question(message: types.Message):  # –≤—Ö–æ–¥ –≤ –º–∞—à–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏–π
    await message.answer("–ß—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å –∑–∞–ø–∏—Å–∞—Ç—å?", reply_markup=cancel_menu)
    await add_notes.description.set()


@dp.message_handler(IsRegistered(), state=add_notes.description)
async def date_notify(message: types.Message, state: FSMContext):  # –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏
    description = message.text
    await state.update_data(description=description)
    await message.answer("–í –∫–∞–∫–æ–π –¥–µ–Ω—å —Ç–µ–±—è –æ–ø–æ–≤–µ—Å—Ç–∏—Ç—å?\n–ü–∏—à–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: dd-mm-yy")
    await add_notes.date_notify.set()


@dp.message_handler(IsRegistered(), state=add_notes.date_notify,
                    regexp=r"(?<!\d)(?:0?[1-9]|[12][0-9]|3[01])-(?:0?[1-9]|1[0-2])-(?:[0-2][0-9])(?!\d)")
async def time_notify(message: types.Message, state: FSMContext):  # –∑–∞–ø–∏—Å—å –¥–∞—Ç—ã –æ–ø–æ–≤–µ—â–µ–Ω–∏—è
    date = message.text
    await state.update_data(date=date)
    await message.answer("–í –∫–∞–∫–æ–µ –≤—Ä–µ–º—è —Ç–µ–±—è –æ–ø–æ–≤–µ—Å—Ç–∏—Ç—å?\n–ü–∏—à–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: hh:mm")
    await add_notes.time_notify.set()


@dp.message_handler(IsRegistered(), state=add_notes.time_notify, regexp=r"(?<!\d)(?:[0-1][0-9]|2[0-3]):(?:[0-5]["
                                                                        r"0-9])(?!\d)")
async def last_state(message: types.Message, state: FSMContext):  # –∑–∞–ø–∏—Å—å –≤—Ä–µ–º–µ–Ω–∏ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–¥
    time = message.text
    user_id = message.from_user.id
    await state.update_data(time=time)
    data = await state.get_data()
    await state.finish()
    try:
        add_new_note(user_id=user_id,
                     description=data.get('description'),
                     date_nf=data.get('date'),
                     time_nf=data.get('time'))
    except Exception as error:
        print(error, "\n –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å—å")
        await message.answer("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫... –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")
        return

    note = get_last_user_note(user_id)
    scheduler.add_job(note_notification,
                      trigger='date',
                      run_date=datetime.strptime(f'{note[3]} {note[4]}', "%d-%m-%y %H:%M"),
                      args=(dp, user_id, note),
                      id=str(note[0]))

    await message.answer(f"‚úÖ–°–æ–∑–¥–∞–Ω–∞ –∑–∞–ø–∏—Å—å:\n\n<b>{data['description']}</b>\n\n"
                         f"(–û–ø–æ–≤–µ—â–µ–Ω–∏–µ {data['time']} 20{data['date']})", reply_markup=main_menu)
