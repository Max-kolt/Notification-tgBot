from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.types import CallbackQuery, ReplyKeyboardRemove

from filters import IsNotRegistered
from keyboards.default import yes_no_menu, main_menu
from keyboards.inline import ikb_yes_no
from loader import dp
from states import register
from db_executor import add_new_user


@dp.message_handler(IsNotRegistered(), text="–î–∞–≤–∞–π!")
async def whats_your_name(message: types.Message):
    await message.answer("–û—Ç–ª–∏—á–Ω–æ! –¢–æ–≥–¥–∞ –æ—Ç–≤–µ—Ç—å –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤. üòä\n\n"
                         "üåí(1/4)–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?", reply_markup=ReplyKeyboardRemove())
    await register.name.set()


@dp.message_handler(IsNotRegistered(), state=register.name)
async def whats_your_city(message: types.Message, state: FSMContext):
    name = message.text
    await state.update_data(name=name)
    await message.answer(f"üåì(2/4){name}, –≤ –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ –ø—Ä–æ–∂–∏–≤–∞–µ—à—å?üèô\n\n"
                         f"–ü–∏—à–∏ –ø–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ, –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã ü§ì")
    await register.city.set()


@dp.message_handler(IsNotRegistered(), state=register.city)
async def weather_notify(message: types.Message, state: FSMContext):
    city = message.text
    await state.update_data(city=city)
    await message.answer("–û—Ç–ª–∏—á–Ω–æ! –ú—ã –Ω–∞ –≤–µ—Ä–Ω–æ–º –ø—É—Ç–∏)\n"
                         "üåî(3/4) –¢–µ–±—è –æ–ø–æ–≤–µ—â–∞—Ç—å –æ –ø–æ–≥–æ–¥–µ?üåß",
                         reply_markup=ikb_yes_no)
    await register.weather_notify.set()


@dp.callback_query_handler(IsNotRegistered(), text='Yes', state=register.weather_notify)
async def time_weather_notify(call: CallbackQuery, state: FSMContext):
    await state.update_data(weather_notify=True)
    await call.message.edit_text("üåî(3,5/4)–í –∫–∞–∫–æ–µ –≤—Ä–µ–º—è —Ç–µ–±—è –æ–ø–æ–≤–µ—â–∞—Ç—å?üå§\n\n"
                                 "üïì –ü–∏—à–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: hh:mm\n"
                                 "–†–µ–∫–æ–º–µ–Ω–¥—É—é —É—Ç—Ä–æ–º, –∫–æ–≥–¥–∞ —Ç—ã –Ω–∞—Å–ª–∞–∂–¥–∞–µ—à—å—Å—è –∑–∞–≤—Ç—Ä–∞–∫–æ–ºüòâ")
    await register.time_weather_notify.set()


@dp.callback_query_handler(IsNotRegistered(), text='No', state=register.weather_notify)
async def analitycs(call: CallbackQuery, state: FSMContext):
    await state.update_data(weather_notify=False, time_weather_notify=None)
    await call.message.delete()
    await call.message.answer("–≠—Ö, –∞ —è —Ç–∞–∫ —Ö–æ—Ç–µ–ª —Ç–µ–±–µ –ø–∏—Å–∞—Ç—å –ø–æ —É—Ç—Ä–∞–º.üôÅ\n"
                              "–ü–æ—Å–ª–µ–¥–Ω–∏–π –≤–æ–ø—Ä–æ—Å!\n\n"
                              "üåï(4/4) –î–µ–ª–∞—Ç—å –ª–∏ –¥–ª—è —Ç–µ–±—è –∞–Ω–∞–ª–∏—Ç–∏–∫—É —Ç–≤–æ–∏—Ö –∑–∞–ø–∏—Å–µ–π?",
                              reply_markup=yes_no_menu)
    await register.analytics.set()


@dp.message_handler(IsNotRegistered(), state=register.time_weather_notify, regexp=r"\d\d[-:]\d\d")
async def analitycs(message: types.Message, state: FSMContext):
    time = message.text
    await state.update_data(time_weather_notify=time)
    await message.answer("–í–æ—Ç –∏ –æ–Ω, –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–æ–ø—Ä–æ—Å!\n"
                         "üåï(4/4) –î–µ–ª–∞—Ç—å –ª–∏ –¥–ª—è —Ç–µ–±—è –∞–Ω–∞–ª–∏—Ç–∏–∫—É —Ç–≤–æ–∏—Ö –∑–∞–ø–∏—Å–µ–π?",
                         reply_markup=yes_no_menu)
    await register.analytics.set()


@dp.message_handler(IsNotRegistered(), state=register.time_weather_notify)
async def analitycs(message: types.Message, state: FSMContext):
    await message.answer("–¢—ã –¥–æ–ø—É—Å—Ç–∏–ª –æ—à–∏–±–∫—É. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑!\n"
                         "–§–æ—Ä–º–∞—Ç: hh:mm (–Ω–∞–ø—Ä–∏–º–µ—Ä, 09:30)")
    await register.time_weather_notify.set()


@dp.message_handler(IsNotRegistered(), state=register.analytics, text=["–î–∞", "–ù–µ—Ç"])
async def register_new_user(message: types.Message, state: FSMContext):
    answer = message.text
    if answer.lower() == "–¥–∞":
        await state.update_data(analytics=True)
    else:
        await state.update_data(analytics=False)

    data = await state.get_data()
    add_new_user(_id=message.from_user.id,
                 name=data.get('name'),
                 city=data.get('city'),
                 weather_notify=data.get('weather_notify'),
                 time_weather_notify=data.get('time_weather_notify'),
                 analytics=data.get('analytics'))

    await message.answer(f"–°–ø–∞—Å–∏–±–æ, {data.get('name')}!\n"
                         f"–¢—ã —É –Ω–∞—Å –∂–∏–≤–µ—à—å –≤ {data.get('city')}.\n"
                         f"–û–ø–æ–≤–µ—â–µ–Ω–∏–µ –æ –ø–æ–≥–æ–¥–µ: {data.get('weather_notify')} (–≤—Ä–µ–º—è: {data.get('time_weather_notify')})\n"
                         f"–°–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏: {data.get('analytics')}"
                         f"\n\n"
                         f"–¢–µ–ø–µ—Ä—å —è –ø–æ–ª–Ω–æ—Å—Ç—å—é –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µüòº",
                         reply_markup=main_menu)
    await state.finish()


